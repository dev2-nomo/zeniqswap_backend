name: Backend CI/CD

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"
          cache: true
      - run: git submodule update --init --recursive
      - run: flutter pub get
      - name: Lint analysis
        continue-on-error: true
        run: flutter analyze

  build-and-deploy-staging:
    name: Build and Deploy Staging
    runs-on: ubuntu-latest
    needs: lint
    if: startsWith(github.ref, 'refs/tags/vi')
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"
          cache: true
      - run: git submodule update --init --recursive
      - run: flutter pub get

      - name: activate frog cli
        run: dart pub global activate dart_frog_cli

      - name: build frog
        run: dart_frog build

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Add staging server to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.HOST_STAGING}} >> ~/.ssh/known_hosts

      - name: Test staging SSH connection
        run: |
          ssh -v -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOST_STAGING }} "echo 'SSH connection established'"

      - name: rsync to staging server
        run: rsync -avz --delete --exclude='.git' build/ ${{ secrets.USERNAME }}@${{ secrets.HOST_STAGING }}:zeniqswap_backend/

      - name: Build Docker image on staging server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOST_STAGING }} "\
            cd zeniqswap_backend && \
            docker build . -t zeniqswap_backend"

      - name: Stop old container on staging server
        if: always()
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOST_STAGING }} "\
            echo 'Stopping container...' && \
            (docker stop zeniqswap_backend || true) && \
            (docker rm -f zeniqswap_backend || true) && \
            (docker system prune -f || true) && \
            echo 'Cleanup complete'"

      - name: Start new container on staging server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOST_STAGING }} "\
            echo 'Starting new container...' && \
            docker run -d \
              --init \
              --name zeniqswap_backend \
              --restart unless-stopped \
              -p 8080:8080 \
              -e VERSION=${{github.ref_name}} \
              zeniqswap_backend || exit 1 && \
            echo 'Container started successfully'"

      - name: Verify deployment on staging server
        if: always()
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOST_STAGING }} "\
            echo 'Docker container status:' && \
            if docker ps | grep -q zeniqswap_backend; then \
              echo 'Container is running' && \
              docker ps | grep zeniqswap_backend; \
            else \
              echo 'Warning: Container not found'; \
            fi && \
      

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: lint
    if: startsWith(github.ref, 'refs/tags/') && !startsWith(github.ref, 'refs/tags/vi')
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v1
      - run: git submodule update --init --recursive
      - run: flutter pub get

      - name: activate frog cli
        run: dart pub global activate dart_frog_cli

      - name: build frog
        run: dart_frog build

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Add LIQ server to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.HOSTLIQ }} >> ~/.ssh/known_hosts

      - name: Test LIQ SSH connection
        run: |
          ssh -v -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }} "echo 'SSH connection established'"

      - name: Add DEX server to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.HOSTDEX }} >> ~/.ssh/known_hosts

      - name: Test DEX SSH connection
        run: |
          ssh -v -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTDEX }} "echo 'SSH connection established'"

      - name: rsync to liquidity server
        run: rsync -avz --delete --exclude='.git' build/ ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }}:zeniqswap_backend/

      - name: rsync to dex server
        run: rsync -avz --delete --exclude='.git' build/ ${{ secrets.USERNAME }}@${{ secrets.HOSTDEX }}:zeniqswap_backend/

      #   - name: build docker image on LIQ server
      #     run: ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }} "cd zeniqswap_backend && docker build . -t zeniqswap_backend && docker rm -f zeniqswap_backend && docker ps -a | grep zeniqswap_backend && systemctl restart zeniqswap-backend.service"
      - name: Build Docker image on LIQ server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }} "\
            cd zeniqswap_backend && \
            docker build . -t zeniqswap_backend"

      - name: Stop old container on LIQ server
        if: always()
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }} "\
            echo 'Stopping container...' && \
            (docker stop zeniqswap_backend || true) && \
            (docker rm -f zeniqswap_backend || true) && \
            echo 'Container stopped' && \
            (sudo systemctl stop zeniqswap-backend.service || true) && \
            echo 'Service stopped' && \
            (docker system prune -f || true) && \
            echo 'Cleanup complete'"

      - name: Emergency cleanup if needed
        if: always()
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }} "\
            echo 'Emergency cleanup...' && \
            (sudo systemctl stop zeniqswap-backend.service || true) && \
            (docker kill zeniqswap_backend || true) && \
            (docker rm -f zeniqswap_backend || true) && \
            (sudo pkill -9 -f zeniqswap_backend || true) && \
            echo 'Emergency cleanup complete'"

      - name: Start new container on LIQ server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }} "\
            echo 'Starting new container...' && \
            docker run -d \
              --init \
              --name zeniqswap_backend \
              --restart unless-stopped \
              zeniqswap_backend || exit 1 && \
            echo 'Container started successfully'"

      - name: Restart service on LIQ server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }} "\
          echo 'Stopping service and cleaning up...' && \
          sudo systemctl stop zeniqswap-backend.service || true && \
          sleep 2 && \
          docker rm -f zeniqswap_backend || true && \
          docker ps -a | grep zeniqswap_backend || true && \
          echo 'Forcing cleanup of any remaining containers...' && \
          docker ps -q -f name=zeniqswap_backend | xargs -r docker rm -f || true && \
          sleep 2 && \
          echo 'Starting service...' && \
          sudo systemctl start zeniqswap-backend.service && \
          echo 'Waiting for service to stabilize...' && \
          sleep 5 && \
          if ! systemctl is-active --quiet zeniqswap-backend.service; then \
            echo 'Service failed to start. Checking logs:' && \
            journalctl -u zeniqswap-backend.service -n 50 --no-pager && \
            docker ps -a | grep zeniqswap_backend || true && \
            exit 1; \
          fi"

      - name: Verify deployment on LIQ server
        if: always()
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTLIQ }} "\
            echo 'Docker container status:' && \
            if docker ps | grep -q zeniqswap_backend; then \
              echo 'Container is running' && \
              docker ps | grep zeniqswap_backend; \
            else \
              echo 'Warning: Container not found'; \
            fi && \
            echo 'Service status:' && \
            if systemctl is-active --quiet zeniqswap-backend.service; then \
              echo 'Service is active' && \
              systemctl status zeniqswap-backend.service; \
            else \
              echo 'Warning: Service is not active'; \
            fi"

      - name: Build Docker image on DEX server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTDEX }} "\
            cd zeniqswap_backend && \
            docker build . -t zeniqswap_backend"

      - name: Stop old container on DEX server
        if: always()
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTDEX }} "\
            echo 'Stopping container...' && \
            (docker stop zeniqswap_backend || true) && \
            (docker rm -f zeniqswap_backend || true) && \
            echo 'Container stopped' && \
            (sudo systemctl stop zeniqswap-backend.service || true) && \
            echo 'Service stopped' && \
            (docker system prune -f || true) && \
            echo 'Cleanup complete'"

      - name: Emergency cleanup DEX if needed
        if: failure()
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTDEX }} "\
            echo 'Emergency cleanup...' && \
            (sudo systemctl stop zeniqswap-backend.service || true) && \
            (docker kill zeniqswap_backend || true) && \
            (docker rm -f zeniqswap_backend || true) && \
            (sudo pkill -9 -f zeniqswap_backend || true) && \
            echo 'Emergency cleanup complete'"

      - name: Start new container on DEX server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTDEX }} "\
            echo 'Starting new container...' && \
            docker run -d \
            --init \
            --name zeniqswap_backend \
            --restart unless-stopped \
            zeniqswap_backend || exit 1 && \
            echo 'Container started successfully'"

      - name: Restart service on DEX server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTDEX }} "\
          echo 'Stopping service and cleaning up...' && \
          sudo systemctl stop zeniqswap-backend.service || true && \
          sleep 2 && \
          docker rm -f zeniqswap_backend || true && \
          docker ps -a | grep zeniqswap_backend || true && \
          echo 'Forcing cleanup of any remaining containers...' && \
          docker ps -q -f name=zeniqswap_backend | xargs -r docker rm -f || true && \
          sleep 2 && \
          echo 'Starting service...' && \
          sudo systemctl start zeniqswap-backend.service && \
          echo 'Waiting for service to stabilize...' && \
          sleep 5 && \
          if ! systemctl is-active --quiet zeniqswap-backend.service; then \
            echo 'Service failed to start. Checking logs:' && \
            journalctl -u zeniqswap-backend.service -n 50 --no-pager && \
            docker ps -a | grep zeniqswap_backend || true && \
            exit 1; \
          fi"

      - name: Verify deployment on DEX server
        if: always()
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.USERNAME }}@${{ secrets.HOSTDEX }} "\
            echo 'Docker container status:' && \
            if docker ps | grep -q zeniqswap_backend; then \
              echo 'Container is running' && \
              docker ps | grep zeniqswap_backend; \
            else \
              echo 'Warning: Container not found'; \
            fi && \
            echo 'Service status:' && \
            if systemctl is-active --quiet zeniqswap-backend.service; then \
              echo 'Service is active' && \
              systemctl status zeniqswap-backend.service; \
            else \
              echo 'Warning: Service is not active'; \
            fi"
